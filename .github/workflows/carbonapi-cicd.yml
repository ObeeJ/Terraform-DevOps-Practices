name: CarbonAPI Production CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  AWS_REGION: 'us-east-1'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  # Code Quality and Security
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: |
          cd api
          go mod download
          go mod tidy

      - name: Run tests
        run: |
          cd api
          go test -v ./... -coverprofile=coverage.out

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage.out
          flags: unittests

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          working-directory: api
          version: latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './api'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Application
  build:
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build Lambda function
        run: |
          cd api
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o main main.go database.go carbon_service.go
          zip carbonapi.zip main
          ls -la carbonapi.zip

      - name: Upload Lambda package
        uses: actions/upload-artifact@v3
        with:
          name: carbonapi-lambda
          path: api/carbonapi.zip
          retention-days: 30

  # Terraform Validation
  terraform-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Run tflint
        uses: terraform-linters/setup-tflint@v3

      - name: Init tflint
        run: tflint --init

      - name: Run tflint
        run: |
          cd terraform
          tflint

  # Infrastructure Plan (for PRs)
  terraform-plan:
    runs-on: ubuntu-latest
    needs: [build, terraform-validate]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda artifact
        uses: actions/download-artifact@v3
        with:
          name: carbonapi-lambda
          path: api/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="environment=staging" -out=tfplan

      - name: Upload plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: terraform/tfplan

  # Deploy to Development
  deploy-development:
    runs-on: ubuntu-latest
    needs: [build, terraform-validate]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda artifact
        uses: actions/download-artifact@v3
        with:
          name: carbonapi-lambda
          path: api/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -var="environment=development" -auto-approve

      - name: Run API Health Check
        run: |
          sleep 30
          API_URL=$(cd terraform && terraform output -raw api_gateway_url)
          curl -f "$API_URL/health" || exit 1
          echo "âœ… Development API is healthy: $API_URL"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, terraform-validate]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda artifact
        uses: actions/download-artifact@v3
        with:
          name: carbonapi-lambda
          path: api/

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="environment=production" -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply tfplan

      - name: Run Integration Tests
        run: |
          sleep 60
          API_URL=$(cd terraform && terraform output -raw api_gateway_url)
          
          # Health check
          curl -f "$API_URL/health" || exit 1
          
          # Test calculate endpoint
          RESPONSE=$(curl -s -X POST "$API_URL/api/v1/calculate" \
            -H "Content-Type: application/json" \
            -d '{"activity":"shipping","weight":500,"from":"NYC","to":"London","transport":"air"}')
          
          echo "API Response: $RESPONSE"
          
          # Check if response contains carbon_footprint
          echo "$RESPONSE" | grep -q "carbon_footprint" || exit 1
          
          echo "âœ… Production API is healthy and functional: $API_URL"

      - name: Update deployment status
        run: |
          API_URL=$(cd terraform && terraform output -raw api_gateway_url)
          echo "ðŸš€ CarbonAPI Production Deployment Complete!"
          echo "ðŸ“Š API URL: $API_URL"
          echo "ðŸ”— Health Check: $API_URL/health"
          echo "ðŸ“š Documentation: $API_URL/api/v1/docs"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-production]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "CarbonAPI Production deployment successful!"
          elif [ "${{ needs.deploy-development.result }}" == "success" ]; then
            echo "CarbonAPI Development deployment successful!"
          else
            echo "Deployment failed. Check logs for details."
          fi
